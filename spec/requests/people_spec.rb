require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "api/v1/people", type: :request do
  let(:response_json) { JSON.parse(response.body)}
  before do
    @person = create(:person)
    @person2 = create(:person)
    @starship = create(:starship)
    @vehicle = create(:vehicle)

    DrivedTransport.create(person_id: @person.id, transport_id: @starship.id)
    DrivedTransport.create(person_id: @person2.id, transport_id: @vehicle.id)

  end

  describe "GET /index" do
    context 'without filters' do
      it "renders a successful response" do

        get api_v1_people_url, as: :json
        expect(response).to be_successful
        expect(response_json.count).to eq(2)
        expect(response_json.first['id']).to eq(@person.id)
        expect(response_json.first['name']).to eq(@person.name)
        expect(response_json.first['planet']['name']).to eq(@person.planet.name)
      end
    end

    context 'with filters' do
      describe '.by_planet' do
        it "renders a successful and correct response" do

          get api_v1_people_url, params: { by_planet: @person.planet.name }

          expect(response_json.count).to eq(1)
          expect(response_json.first['id']).to eq(@person.id)
          expect(response_json.first['name']).to eq(@person.name)
          expect(response_json.first['planet']['name']).to eq(@person.planet.name)
        end
      end

      describe '.by_starship' do
        it "renders a successful and correct response" do
          get api_v1_people_url, params: { by_starship: @starship.name }

          expect(response_json.count).to eq(1)
          expect(response_json.first['id']).to eq(@person.id)
          expect(response_json.first['name']).to eq(@person.name)
          expect(response_json.first['planet']['name']).to eq(@person.planet.name)
        end
      end

      describe '.by_vehicle' do
        it "renders a successful and correct response" do
          get api_v1_people_url, params: { by_vehicle: @vehicle.name }

          expect(response_json.count).to eq(1)
          expect(response_json.first['id']).to eq(@person2.id)
          expect(response_json.first['name']).to eq(@person2.name)
          expect(response_json.first['planet']['name']).to eq(@person2.planet.name)
        end
      end

    end


  end

  describe "GET /show" do
    context 'with planet' do
      it "renders a successful response" do
        get api_v1_person_url(@person), as: :json
        expect(response).to be_successful
        expect(response_json['id']).to eq(@person.id)
        expect(response_json['name']).to eq(@person.name)
        expect(response_json['birth_year']).to eq(@person.birthday_year)
        expect(response_json['height']).to eq(@person.height)
        expect(response_json['mass']).to eq(@person.mass)
        expect(response_json['species']).to be_empty
        expect(response_json['vehicle']).to be_empty
        expect(response_json['starships']).to_not be_empty
        expect(response_json['starships'].first['id']).to eq(@starship.id)
        expect(response_json['starships'].first['name']).to eq(@starship.name)
        expect(response_json['planet']['id']).to eq(@person.planet.id)
        expect(response_json['planet']['name']).to eq(@person.planet.name)
        expect(response_json['phrase']).to eq(@person.presentation_phrase)
      end
    end

    context 'without planet' do
      before { @person.update(planet_id: nil) }
      it "renders a successful response" do
        get api_v1_person_url(@person), as: :json
        expect(response_json['planet']).to be_nil
      end
    end


  end


end
